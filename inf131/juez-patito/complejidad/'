import java.util.*;

public class SumFactor2203 {
  static int findSumeOfPrimeNumbers(int n, List<Integer> primes) {
    List<Integer> factors = new ArrayList<>();
    int currentNum = n;
    int res = 0;
    int i = 0;
    int primeFactor = primes.get(i);
    int it = 0;
    while (currentNum > 1 && i < primes.size()) {
      if (currentNum % primeFactor == 0) {
        factors.add(primeFactor);
        res += primeFactor;
        while (currentNum % primeFactor == 0) {
          currentNum /= primeFactor;
        }
      }
      i++;
      primeFactor = primes.get(i);
    }

    return res;
  }

  public static void main(String[] args) {
    List<Integer> primes = sieveOfEratosthenes(2, 1000000);

    /* Scanner scanner = new Scanner(System.in); */
    /* //  [1, 10] */
    /* Map<int[], Integer> cache = new HashMap<>(); */
    /* int t = scanner.nextInt(); */
    /*  */
    /* for (int i = 0; i < t; i++) { */
    /*   int a = scanner.nextInt(); */
    /*   int b = scanner.nextInt(); */
    /*  */
    /*   solution(primes, a, b); */
    /* } */
  }

  static void solution(List<Integer> primes, int a, int b) {
    int sum = 0;
    for (int i = a; i <= b; i++) {
      if (i <= 1)
        continue;
      res += findSumeOfPrimeNumbers(i, primes);
    }
    System.out.println(sum);
    sum += res;
  }
  System.out.println(sum);
}
public static boolean isPrime(int n, List<Integer> primes) {
  if (n <= 1)
    return false;

  for (long prime : primes) {
    if (prime * prime > n)
      break;
    if (n % prime == 0)
      return false;
  }
  primes.add(n);
  return true;
}

static List<Integer> sieveOfEratosthenes(int start, long n) {
  boolean[] primes = new boolean[(int)((n - start) + 1)];
  List<Integer> primeList = new ArrayList<>();

  for (int i = 0; i < primes.length; i++) {
    primes[i] = true;
  }

  int sqrtN = (int)Math.sqrt(n);

  for (int p = 2; p <= sqrtN; p++) {
    int i = Math.max(2, (start + p - 1) / p);
    for (int j = i * p; j <= n; j += p) {
      if (j >= start) {
        primes[(int)(j - start)] = false;
      }
    }
  }

  for (int i = 0; i < primes.length; i++) {
    if (primes[i])
      primeList.add(i + start);
  }

  return primeList;
}
}
