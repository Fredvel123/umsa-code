import java.util.*;
class ElJuegoPerfecto1857 {
  public static void main(String[] args) {
    /* Scanner scanner = new Scanner(System.in); */
    /* int n = scanner.nextInt(); */
    /* int a[] = new int[n]; */
    /*  */
    /* for (int i = 0; i < n; i++) { */
    /*   a[i] = scanner.nextInt(); */
    /* } */
    /*  */
    /* int m = scanner.nextInt(); */
    /* int b[] = new int[m]; */
    /*  */
    /* for (int i = 0; i < m; i++) { */
    /*   b[i] = scanner.nextInt(); */
    /* } */
    int a[] = {2, 4};
    int b[] = {3, 5};

    int a_min = a[0];
    int a_max = a[a.length - 1];
    int b_min = b[0];
    int b_max = b[b.length - 1];
    int distances[] = generateDistanceLiwst(a, b);

    Long max = Long.MIN_VALUE;
    String res = "";

    for (int d : distances) {
      int res_a = 0;
      if (d < a_min) {
        res_a = 3 * a.length;
      } else if (d >= a_max) {
        res_a = 2 * a.length;
      } else if (d >= a_min && d <= a_max) {
        res_a = calculationMiddle(a, d);
      }
      int res_b = 0;
      if (d < b_min) {
        res_b = 3 * b.length;
      } else if (d >= b_max) {
        res_b = 2 * b.length;
      } else if (d >= b_min && d <= b_max) {
        res_b = calculationMiddle(b, d);
      }
      long diff = res_a - res_b;
      if (diff > max) {
        max = diff;
        res = res_a + ":" + res_b;
      }
    }
    System.out.println(res);
  }

  static int calculationMiddle(int nums[], int x) {
    int indexMid = bs(nums, 0, nums.length - 1, x);
    int res = 0;

    if (indexMid == -1) {

      /* for (int i = 0; i < nums.length; i++) { */
      /*   int n = nums[i]; */
      /*   if (n == x) { */
      /*     indexMid = i; */
      /*     [> break; <] */
      /*   } */
      /* } */

      for (int n : nums) {
        if (n <= x) {
          res += 2;
        } else {
          res += 3;
        }
      }
    } else {

      int two_points = (indexMid + 1) * 2;

      int three_points = (nums.length - (indexMid + 1)) * 3;
      res = two_points + three_points;
    }
    return res;
  }

  static int[] generateDistanceLiwst(int a[], int b[]) {
    int res[] = new int[a.length + b.length + 1];
    res[0] = a[0] - 1;

    int resInd = 1;

    for (int i = 0; i < a.length; i++) {
      res[resInd] = a[i];
      resInd++;
    }
    for (int i = 0; i < b.length; i++) {
      res[resInd] = b[i];
      resInd++;
    }
    return res;
  }

  static int bs(int n[], int left, int right, int target) {

    if (left > right) {
      return -1;
    }
    int middle = right + (left - right) / 2;
    if (n[middle] == target) {
      return middle;
    }
    if (n[middle] < target) {
      return bs(n, middle + 1, right, target);
    }
    return bs(n, left, middle - 1, target);
  }
}
